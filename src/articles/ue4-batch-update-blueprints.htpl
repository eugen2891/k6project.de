!UE4: Batch update of blueprint classes
This article is based on one of my recent assignments at work. The idea is: we have a large amount of blueprint classes in the UE4 project, and each of them contains a fair amount of different components - and now we need to iterate through all of them and modify every relevant component in some way (the nature of exact modification is not important, for this article I have chosen to simply scale position of all USceneComponent instances by some factor).
Enumerating assets in the project is done relatively straightforward using AssetRegistry module (make sure to add it to project dependencies in Build.cs file). Here is simplified example code that accomplishes the task at hand:
<<<
const Scale = 0.01f;
TArray<FAssetData> AllBlueprints;
auto& Registry = FModuleManager::LoadModuleChecked<FAssetRegistryModule>(TEXT("AssetRegistry"));
Registry.Get().GetAssetsByClass(UBlueprint::StaticClass()->GetFName(), AllBlueprints);
for (FAssetData& AssetData : AllBlueprints)
{
    UObject* AssetObject = AssetData.GetAsset();
    if (UBlueprint* Blueprint = Cast<UBlueprint>(AssetObject))
    {
        if (Blueprint->BlueprintType == BPTYPE_Normal ||
            Blueprint->BlueprintType == BPTYPE_Const)
        {
            ScalePositions(Blueprint, Scale);
        }
    }
}
>>>
Initially I though it sufficient to get the default object of a class that blueprint generates and update every USceneComponent it contains, like this:
<<<
void ScalePositions(UBlueprint* Blueprint, float Scale)
{
    UObject* CDO = Blueprint->GeneratedClass->GetDefaultObject();
    if (AActor* Actor = Cast<AActor>(CDO))
    {
        for (UActorComponent* ActorComponent : Actor->GetComponents())
        {
            if (USceneComponent* SceneComponent = Cast<USceneComponent>(ActorComponent))
            {
                SceneComponent->RelativeLocation *= Scale;
            }
        }
    }
}
>>>
After running the code above and checking the blueprints afterwards, a problem became apparent: only components inherited from parent C++ classes where modified, and those created by the blueprint itself were left untouched. I have spent quiet some time digging into it, in the same time posting a support question via corporate UDN account. I went as far as looking into how blueprint editor behaves when creating a tree of components - and that is how UBlueprint::SimpleConstructionScript and its collection of USCS_Node objects came into play. Looking at it now, it seems like an obvious place to search for it, but back at the time - well, probably I am simply slow ;)
So, I ended up adding the following code right after for-loop in ScalePositions() function:
<<<
const TArray<USCS_Node*>& BPNodes = Blueprint->SimpleConstructionScript->GetAllNodes();
for (USCS_Node* Node : BPNodes)
{
    if (USceneComponent* SceneComponent = Cast<USceneComponent>(Node->ComponentTemplate))
    {
        SceneComponent->RelativeLocation *= Scale;
    }
}
>>>
After going through previous step, I found out that there was yet another piece of the puzzle missing: in case, when a blueprint class is derived not from C++, but from another blueprint, blueprint-spawned components of the parent class are still left out! After another lengthy round of digging through source code, UDN and C++ API docs, I have finally got to a UInheritableComponentHandler, which turned out to be a container of exactly that. Here goes the final piece of code to be added into ScalePositions(), right after previously added fragment ends:
<<<
TArray<UActorComponent*> InheritableComponents;
UInheritableComponentHandler* ICHandler = Target->GetInheritableComponentHandler(true);
if (ICHandler)
{
    ICHandler->GetAllTemplates(InheritableComponents);
    for (UActorComponent* ActorComponent : InheritableComponents)
    {
        if (USceneComponent* SceneComponent = Cast<USceneComponent>(ActorComponent))
        {
            SceneComponent->RelativeLocation *= Scale;
        }
    }
}
>>>
It did cost me some time digging through the editor code, but it worked at the end of the day. As I am only beginning to get myself acquainted with inner workings of Unreal Engine 4, it may well be that my solution is still not covering certain cases, or is entirely sub-optimal - but then again, the code in this article is only a shortened example, things like pre-allocating memory before enumerating components are left out intentionally. Also, it is one of the purposes of writing this article - to revisit the topic at a later date, hopefully coming up with a better way of doing things.
Until then, happy UE4 editor hacking!
